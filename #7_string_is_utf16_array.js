/**
 * item #7
 * 문자열을 16비트 코드 유닛의 배열로 취급하기
 * 
 * 유니코드는 프로그래머가 간과하기 쉬운 부분이다.
 * 유니코드를 통해 문자열이 어떻게 컴퓨터에서 표현되는지 알아야 한다.
 * 유니코드는 0부터 1,114,111까지의 코드 포인트를 정의한다.
 * 세상의 모든 글자 체계를 표현할 수 있도록 고안되었다.
 * 
 * ASCII는 각 바이트마다 코드가 할당되어 있으므로, 1바이트로 표현할 수 있다.
 * 유니코드는 여러 바이트로 표현할 수 있으므로, 이 부분을 알고 있어야 한다.
 * 이러한 유니코드를 표현하는 방법은 UTF-8, UTF-16, UTF-32 등이 있다.
 * 
 * 초기 유니코드는 16비트 이상은 필요하지 않을 거라고 생각했다.
 * 하지만, 더욱 많은 글자 체계가 필요해지면서 16비트로는 부족하게 되었다.
 * 
 * 당시 수많은 플랫폼이 16비트 문자 인코딩을 사용했다. (java 역시 마찬가지)
 * 
 * 그러므로 특정한 문자는 16비트로 표현할 수 없게 되면서, 문자열을 처리 시 고려해야 할 사항이 생겼다.
 * 👍 라는 값은 code point 상으로 
 * 
 * 참고 https://unicode.org/emoji/charts/full-emoji-list.html
 */

const str = "👍"; // 16비트 범위를 벗어나므로, 2개의 문자 크기를 차지한다.
const hangul = "가";

console.log(str.length); // 2
console.log(str); // 2
console.log(hangul.length); // 1