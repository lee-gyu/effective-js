/**
 * item #3
 * 자바스크립트의 암묵적 형변환에 주의
 * 
 * 
 */

// 자바스크립트는 데이터 타입에 매우 관대한 언어이다.
// 3 + true를 4로 처리한다.
// 대다수의 프로그래밍 언어는 true를 산술 연산에 허용하지 않는다.

// 아래의 경우는 자바스크립트에서 에러로 처리한다.
// 1. 함수가 아닌데, 함수로 호출하는 경우
"hello"();

// 2. null 또는 undefined에서 멤버를 참조하는 경우
null.x;
undefined.y;

// 이외의 산술 연산이 호출되는 경우에는 자바스크립트는 자동 형변환 프로토콜에 따라 형변환을 수행한다.
// 만약, 숫자와 문자열을 합친다면, 문자열을 우선으로 한다.
2 + "3" // "23"
"2" + 3 // "23"

// 비트 단위 연산을 수행하면 문자열도 32 비트 정수로 취급한다.
"8" | "1" // 9

// 곱하기 연산의 경우는 double 형식으로 처리한다.
"513322" * "510322";
"5132" ** "3";

// null의 경우는 0으로 처리한다.
1 + null + 5; // 6

// undefined의 경우는 NaN으로 처리한다.
1 + undefined + 5; // NaN

// NaN의 경우는 예외를 발생시키지 않고 계속해서 코드를 수행하므로, 결과를 혼란스럽게 만든다.
// NaN은 테스트 하기가 어려운 값으로 취급된다.
// IEEE에 정의된 요구 사항에 따라 NaN이라는 타입은 자신을 동등하다고 처리하지 않는다.
// 따라서, NaN === NaN은 false를 반환한다.
// isNaN이라는 함수가 있지만, 이는 암묵적인 형변환을 수행하므로 정확한 NaN을 확인할 수는 없다.
isNaN(NaN); // true
isNaN("asd"); // true
isNaN("1234"); // false
isNaN({}); // true

// Number.isNaN을 사용하면 정확한 NaN을 확인할 수 있다.
Number.isNaN(NaN); // true
Number.isNaN("asd"); // false
Number.isNaN("1234"); // false
Number.isNaN({}); // false